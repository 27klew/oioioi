# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2019-06-24 23:20
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('problems', '0017_origintags'),
    ]

    operations = [
        migrations.AlterField(
            model_name='origininfocategory',
            name='name',
            field=models.CharField(help_text="Type of information within this category. Short, searchable name consisting of only lowercase letters, numbers, and hyphens.<br>Examples: 'year', 'edition', 'stage', 'day'.", max_length=20, validators=(django.core.validators.RegexValidator(b'^[0-9a-z-]+$', 'Enter a valid name consisting only of lowercase letters, numbers, and hyphens.'),), verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='origininfocategory',
            name='order',
            field=models.IntegerField(blank=True, help_text="Sometimes the parent_tag relationship by itself is not enough to convey full information about the information hierarchy.<br>Some categories are broader, and others are more specific. More specific tags should probably be visually grouped after/under broader tags when displayed.<br>The broader the category is the lower grouping order it should have - e.g. 'year' should have lower order than 'round'.<br>Left blank means 'infinity', which usually means that this category will not be used for grouping - some categories could be too specific (e.g. when grouping would result in 'groups' of single Problems).", null=True, verbose_name='grouping order'),
        ),
        migrations.AlterField(
            model_name='origininfovalue',
            name='parent_tag',
            field=models.ForeignKey(help_text="If an OriginTag T is a parent of OriginInfoValue V, the presence of V on a Problem implies the presence of T.<br>OriginInfoValues with the same values are also treated as distinct if they have different parents.<br>You can think of this distinction as prepending an OriginTag.name prefix to an OriginInfoValue.value<br>e.g. for OriginTag 'pa' and OriginInfoValue '2011', this unique OriginInfoValue.name would be 'pa_2011'", on_delete=django.db.models.deletion.CASCADE, related_name='info_values', to='problems.OriginTag', verbose_name='parent tag'),
        ),
        migrations.AlterField(
            model_name='origininfovalue',
            name='value',
            field=models.CharField(help_text="Short, searchable value consisting of only lowercase letters and numbers.<br>This will be displayed verbatim in the Problemset - it must be unique within its parent tag.<br>Examples: for year: '2011', but for round: 'r1' (just '1' for round would be ambiguous).", max_length=32, validators=(django.core.validators.RegexValidator(b'^[0-9a-z-]+$', 'Enter a valid name consisting only of lowercase letters, numbers, and hyphens.'),), verbose_name='value'),
        ),
        migrations.AlterField(
            model_name='origintag',
            name='name',
            field=models.CharField(help_text='Short, searchable name consisting only of lowercase letters, numbers, and hyphens.<br>This should refer to general origin, i.e. a particular contest, competition, programming camp, etc.<br>This will be displayed verbatim in the Problemset.', max_length=20, validators=(django.core.validators.RegexValidator(b'^[0-9a-z-]+$', 'Enter a valid name consisting only of lowercase letters, numbers, and hyphens.'),), verbose_name='name'),
        ),
    ]
